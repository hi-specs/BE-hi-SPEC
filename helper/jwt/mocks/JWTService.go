// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// JWTService is an autogenerated mock type for the JWTService type
type JWTService struct {
	mock.Mock
}

// ExtractToken provides a mock function with given fields: t
func (_m *JWTService) ExtractToken(t *jwt.Token) (uint, string, error) {
	ret := _m.Called(t)

	var r0 uint
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (uint, string, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) uint); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) string); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token) error); ok {
		r2 = rf(t)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateJWT provides a mock function with given fields: idUser, rolesUser
func (_m *JWTService) GenerateJWT(idUser uint, rolesUser string) (string, error) {
	ret := _m.Called(idUser, rolesUser)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (string, error)); ok {
		return rf(idUser, rolesUser)
	}
	if rf, ok := ret.Get(0).(func(uint, string) string); ok {
		r0 = rf(idUser, rolesUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(idUser, rolesUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTService creates a new instance of JWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTService {
	mock := &JWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
