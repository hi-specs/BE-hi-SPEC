// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	transaction "BE-hi-SPEC/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AdminDashboard provides a mock function with given fields:
func (_m *Repository) AdminDashboard() (transaction.TransactionDashboard, error) {
	ret := _m.Called()

	var r0 transaction.TransactionDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func() (transaction.TransactionDashboard, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() transaction.TransactionDashboard); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(transaction.TransactionDashboard)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Checkout provides a mock function with given fields: userID, ProductID, ProductPrice
func (_m *Repository) Checkout(userID uint, ProductID int, ProductPrice int) (transaction.Transaction, error) {
	ret := _m.Called(userID, ProductID, ProductPrice)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (transaction.Transaction, error)); ok {
		return rf(userID, ProductID, ProductPrice)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) transaction.Transaction); ok {
		r0 = rf(userID, ProductID, ProductPrice)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(userID, ProductID, ProductPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: transactionID
func (_m *Repository) GetTransaction(transactionID uint) (*transaction.TransactionList, error) {
	ret := _m.Called(transactionID)

	var r0 *transaction.TransactionList
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*transaction.TransactionList, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(uint) *transaction.TransactionList); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionList)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransCallback provides a mock function with given fields: transactionID
func (_m *Repository) MidtransCallback(transactionID string) (*transaction.TransactionList, error) {
	ret := _m.Called(transactionID)

	var r0 *transaction.TransactionList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*transaction.TransactionList, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(string) *transaction.TransactionList); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionList provides a mock function with given fields: page, limit
func (_m *Repository) TransactionList(page int, limit int) ([]transaction.TransactionList, int, error) {
	ret := _m.Called(page, limit)

	var r0 []transaction.TransactionList
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]transaction.TransactionList, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []transaction.TransactionList); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.TransactionList)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserTransaction provides a mock function with given fields: userID
func (_m *Repository) UserTransaction(userID uint) (transaction.UserTransaction, error) {
	ret := _m.Called(userID)

	var r0 transaction.UserTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (transaction.UserTransaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) transaction.UserTransaction); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(transaction.UserTransaction)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
