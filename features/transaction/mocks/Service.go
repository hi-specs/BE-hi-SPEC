// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	transaction "BE-hi-SPEC/features/transaction"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AdminDashboard provides a mock function with given fields: token, page, limit
func (_m *Service) AdminDashboard(token *jwt.Token, page int, limit int) (transaction.TransactionDashboard, int, error) {
	ret := _m.Called(token, page, limit)

	var r0 transaction.TransactionDashboard
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) (transaction.TransactionDashboard, int, error)); ok {
		return rf(token, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) transaction.TransactionDashboard); ok {
		r0 = rf(token, page, limit)
	} else {
		r0 = ret.Get(0).(transaction.TransactionDashboard)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, int, int) int); ok {
		r1 = rf(token, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, int, int) error); ok {
		r2 = rf(token, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Checkout provides a mock function with given fields: token, ProductID, ProductPrice
func (_m *Service) Checkout(token *jwt.Token, ProductID int, ProductPrice int) (transaction.Transaction, error) {
	ret := _m.Called(token, ProductID, ProductPrice)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) (transaction.Transaction, error)); ok {
		return rf(token, ProductID, ProductPrice)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) transaction.Transaction); ok {
		r0 = rf(token, ProductID, ProductPrice)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, int, int) error); ok {
		r1 = rf(token, ProductID, ProductPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadTransaction provides a mock function with given fields: token, transactionID
func (_m *Service) DownloadTransaction(token *jwt.Token, transactionID uint) error {
	ret := _m.Called(token, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransaction provides a mock function with given fields: token, transactionID
func (_m *Service) GetTransaction(token *jwt.Token, transactionID uint) (transaction.TransactionList, error) {
	ret := _m.Called(token, transactionID)

	var r0 transaction.TransactionList
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (transaction.TransactionList, error)); ok {
		return rf(token, transactionID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) transaction.TransactionList); ok {
		r0 = rf(token, transactionID)
	} else {
		r0 = ret.Get(0).(transaction.TransactionList)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransCallback provides a mock function with given fields: transactionID
func (_m *Service) MidtransCallback(transactionID string) (transaction.TransactionList, error) {
	ret := _m.Called(transactionID)

	var r0 transaction.TransactionList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (transaction.TransactionList, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(string) transaction.TransactionList); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(transaction.TransactionList)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionList provides a mock function with given fields: token, page, limit
func (_m *Service) TransactionList(token *jwt.Token, page int, limit int) ([]transaction.TransactionList, int, error) {
	ret := _m.Called(token, page, limit)

	var r0 []transaction.TransactionList
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) ([]transaction.TransactionList, int, error)); ok {
		return rf(token, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) []transaction.TransactionList); ok {
		r0 = rf(token, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.TransactionList)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, int, int) int); ok {
		r1 = rf(token, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, int, int) error); ok {
		r2 = rf(token, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePdfTransaction provides a mock function with given fields: link, transactionID
func (_m *Service) UpdatePdfTransaction(link string, transactionID uint) error {
	ret := _m.Called(link, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(link, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTransaction provides a mock function with given fields: token, userID
func (_m *Service) UserTransaction(token *jwt.Token, userID uint) (transaction.UserTransaction, error) {
	ret := _m.Called(token, userID)

	var r0 transaction.UserTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (transaction.UserTransaction, error)); ok {
		return rf(token, userID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) transaction.UserTransaction); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Get(0).(transaction.UserTransaction)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
