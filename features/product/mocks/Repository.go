// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	product "BE-hi-SPEC/features/product"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DelProduct provides a mock function with given fields: productID
func (_m *Repository) DelProduct(productID uint) error {
	ret := _m.Called(productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProduct provides a mock function with given fields: page, limit
func (_m *Repository) GetAllProduct(page int, limit int) ([]product.Product, error) {
	ret := _m.Called(page, limit)

	var r0 []product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]product.Product, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []product.Product); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductID provides a mock function with given fields: productID
func (_m *Repository) GetProductID(productID uint) (*product.Product, error) {
	ret := _m.Called(productID)

	var r0 *product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*product.Product, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint) *product.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: UserID, newProduct
func (_m *Repository) InsertProduct(UserID uint, newProduct product.Product) (product.Product, error) {
	ret := _m.Called(UserID, newProduct)

	var r0 product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, product.Product) (product.Product, error)); ok {
		return rf(UserID, newProduct)
	}
	if rf, ok := ret.Get(0).(func(uint, product.Product) product.Product); ok {
		r0 = rf(UserID, newProduct)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	if rf, ok := ret.Get(1).(func(uint, product.Product) error); ok {
		r1 = rf(UserID, newProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProduct provides a mock function with given fields: name, category, minPrice, maxPrice, page, limit
func (_m *Repository) SearchProduct(name string, category string, minPrice uint, maxPrice uint, page int, limit int) ([]product.Product, error) {
	ret := _m.Called(name, category, minPrice, maxPrice, page, limit)

	var r0 []product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, uint, uint, int, int) ([]product.Product, error)); ok {
		return rf(name, category, minPrice, maxPrice, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint, uint, int, int) []product.Product); ok {
		r0 = rf(name, category, minPrice, maxPrice, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint, uint, int, int) error); ok {
		r1 = rf(name, category, minPrice, maxPrice, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: productID, input
func (_m *Repository) UpdateProduct(productID uint, input product.Product) (product.Product, error) {
	ret := _m.Called(productID, input)

	var r0 product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, product.Product) (product.Product, error)); ok {
		return rf(productID, input)
	}
	if rf, ok := ret.Get(0).(func(uint, product.Product) product.Product); ok {
		r0 = rf(productID, input)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	if rf, ok := ret.Get(1).(func(uint, product.Product) error); ok {
		r1 = rf(productID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
