// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	user "BE-hi-SPEC/features/user"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: token, productID
func (_m *Service) AddFavorite(token *jwt.Token, productID uint) (user.Favorite, error) {
	ret := _m.Called(token, productID)

	var r0 user.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (user.Favorite, error)); ok {
		return rf(token, productID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) user.Favorite); ok {
		r0 = rf(token, productID)
	} else {
		r0 = ret.Get(0).(user.Favorite)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelFavorite provides a mock function with given fields: token, favoriteID
func (_m *Service) DelFavorite(token *jwt.Token, favoriteID uint) error {
	ret := _m.Called(token, favoriteID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, favoriteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields: token, page, limit
func (_m *Service) GetAllUser(token *jwt.Token, page int, limit int) ([]user.User, int, error) {
	ret := _m.Called(token, page, limit)

	var r0 []user.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) ([]user.User, int, error)); ok {
		return rf(token, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, int, int) []user.User); ok {
		r0 = rf(token, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, int, int) int); ok {
		r1 = rf(token, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, int, int) error); ok {
		r2 = rf(token, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: token
func (_m *Service) GetUser(token *jwt.Token) (user.Favorite, error) {
	ret := _m.Called(token)

	var r0 user.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (user.Favorite, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) user.Favorite); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.Favorite)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HapusUser provides a mock function with given fields: token, userID
func (_m *Service) HapusUser(token *jwt.Token, userID uint) error {
	ret := _m.Called(token, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *Service) Login(email string, password string) (user.User, error) {
	ret := _m.Called(email, password)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser user.User) (user.User, error) {
	ret := _m.Called(newUser)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUser provides a mock function with given fields: token, name, page, limit
func (_m *Service) SearchUser(token *jwt.Token, name string, page int, limit int) ([]user.User, int, error) {
	ret := _m.Called(token, name, page, limit)

	var r0 []user.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, string, int, int) ([]user.User, int, error)); ok {
		return rf(token, name, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, string, int, int) []user.User); ok {
		r0 = rf(token, name, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, string, int, int) int); ok {
		r1 = rf(token, name, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, string, int, int) error); ok {
		r2 = rf(token, name, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: token, input
func (_m *Service) UpdateUser(token *jwt.Token, input user.User) (user.User, error) {
	ret := _m.Called(token, input)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, user.User) (user.User, error)); ok {
		return rf(token, input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, user.User) user.User); ok {
		r0 = rf(token, input)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, user.User) error); ok {
		r1 = rf(token, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
