// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	user "BE-hi-SPEC/features/user"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: userID, productID
func (_m *Repository) AddFavorite(userID uint, productID uint) (user.Favorite, error) {
	ret := _m.Called(userID, productID)

	var r0 user.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (user.Favorite, error)); ok {
		return rf(userID, productID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) user.Favorite); ok {
		r0 = rf(userID, productID)
	} else {
		r0 = ret.Get(0).(user.Favorite)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelFavorite provides a mock function with given fields: favoriteID
func (_m *Repository) DelFavorite(favoriteID uint) error {
	ret := _m.Called(favoriteID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(favoriteID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID
func (_m *Repository) DeleteUser(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUser provides a mock function with given fields:
func (_m *Repository) GetAllUser() ([]user.User, error) {
	ret := _m.Called()

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]user.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *Repository) GetUser(userID uint) (user.Favorite, error) {
	ret := _m.Called(userID)

	var r0 user.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (user.Favorite, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) user.Favorite); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(user.Favorite)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *Repository) GetUserByID(userID uint) (*user.User, error) {
	ret := _m.Called(userID)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*user.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *user.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: newUser
func (_m *Repository) InsertUser(newUser user.User) (user.User, error) {
	ret := _m.Called(newUser)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *Repository) Login(email string) (user.User, error) {
	ret := _m.Called(email)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUser provides a mock function with given fields: name
func (_m *Repository) SearchUser(name string) ([]user.User, error) {
	ret := _m.Called(name)

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]user.User, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []user.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: input
func (_m *Repository) UpdateUser(input user.User) (user.User, error) {
	ret := _m.Called(input)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
